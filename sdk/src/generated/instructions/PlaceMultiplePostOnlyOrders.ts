/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  MultipleOrderPacket,
  multipleOrderPacketBeet,
} from '../types/MultipleOrderPacket'

/**
 * @category Instructions
 * @category PlaceMultiplePostOnlyOrders
 * @category generated
 */
export type PlaceMultiplePostOnlyOrdersInstructionArgs = {
  multipleOrderPacket: MultipleOrderPacket
}
/**
 * @category Instructions
 * @category PlaceMultiplePostOnlyOrders
 * @category generated
 */
export const PlaceMultiplePostOnlyOrdersStruct = new beet.FixableBeetArgsStruct<
  PlaceMultiplePostOnlyOrdersInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['multipleOrderPacket', multipleOrderPacketBeet],
  ],
  'PlaceMultiplePostOnlyOrdersInstructionArgs'
)
/**
 * Accounts required by the _PlaceMultiplePostOnlyOrders_ instruction
 *
 * @property [] phoenixProgram Phoenix program
 * @property [] logAuthority Phoenix log authority
 * @property [_writable_] market This account holds the market state
 * @property [**signer**] trader
 * @property [] seat
 * @property [_writable_] baseAccount Trader base token account
 * @property [_writable_] quoteAccount Trader quote token account
 * @property [_writable_] baseVault Base vault PDA, seeds are [b'vault', market_address, base_mint_address]
 * @property [_writable_] quoteVault Quote vault PDA, seeds are [b'vault', market_address, quote_mint_address]
 * @category Instructions
 * @category PlaceMultiplePostOnlyOrders
 * @category generated
 */
export type PlaceMultiplePostOnlyOrdersInstructionAccounts = {
  phoenixProgram: web3.PublicKey
  logAuthority: web3.PublicKey
  market: web3.PublicKey
  trader: web3.PublicKey
  seat: web3.PublicKey
  baseAccount: web3.PublicKey
  quoteAccount: web3.PublicKey
  baseVault: web3.PublicKey
  quoteVault: web3.PublicKey
  tokenProgram?: web3.PublicKey
}

export const placeMultiplePostOnlyOrdersInstructionDiscriminator = 16

/**
 * Creates a _PlaceMultiplePostOnlyOrders_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PlaceMultiplePostOnlyOrders
 * @category generated
 */
export function createPlaceMultiplePostOnlyOrdersInstruction(
  accounts: PlaceMultiplePostOnlyOrdersInstructionAccounts,
  args: PlaceMultiplePostOnlyOrdersInstructionArgs,
  programId = new web3.PublicKey('phnxNHfGNVjpVVuHkceK3MgwZ1bW25ijfWACKhVFbBH')
) {
  const [data] = PlaceMultiplePostOnlyOrdersStruct.serialize({
    instructionDiscriminator:
      placeMultiplePostOnlyOrdersInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.phoenixProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.market,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.trader,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.seat,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.baseAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.baseVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.quoteVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
